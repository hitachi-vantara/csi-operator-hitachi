apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: localvolumes.hspc.hitachi.com
spec:
  group: hspc.hitachi.com
  names:
    kind: LocalVolume
    listKind: LocalVolumeList
    plural: localvolumes
    singular: localvolume
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.ready
      name: Ready
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: LocalVolume is the Schema for the localvolumes API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LocalVolumeSpec defines the desired state of LocalVolume
            properties:
              persistentVolumeClaimName:
                description: PersistentVolumeClaimName for creating replication
                type: string
              persistentVolumeClaimSpec:
                description: PersistentVolumeClaimSpec defines the spec of PersistentVolumeClaim
                properties:
                  accessModes:
                    description: 'accessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                    items:
                      type: string
                    type: array
                  dataSource:
                    description: 'dataSource field can be used to specify either:
                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. When the AnyVolumeDataSource feature gate is enabled,
                      dataSource contents will be copied to dataSourceRef, and dataSourceRef
                      contents will be copied to dataSource when dataSourceRef.namespace
                      is not specified. If the namespace is specified, then dataSourceRef
                      will not be copied to dataSource.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                    x-kubernetes-map-type: atomic
                  dataSourceRef:
                    description: 'dataSourceRef specifies the object from which to
                      populate the volume with data, if a non-empty volume is desired.
                      This may be any object from a non-empty API group (non core
                      object) or a PersistentVolumeClaim object. When this field is
                      specified, volume binding will only succeed if the type of the
                      specified object matches some installed volume populator or
                      dynamic provisioner. This field will replace the functionality
                      of the dataSource field and as such if both fields are non-empty,
                      they must have the same value. For backwards compatibility,
                      when namespace isn''t specified in dataSourceRef, both fields
                      (dataSource and dataSourceRef) will be set to the same value
                      automatically if one of them is empty and the other is non-empty.
                      When namespace is specified in dataSourceRef, dataSource isn''t
                      set to the same value and must be empty. There are three important
                      differences between dataSource and dataSourceRef: * While dataSource
                      only allows two specific types of objects, dataSourceRef allows
                      any non-core object, as well as PersistentVolumeClaim objects.
                      * While dataSource ignores disallowed values (dropping them),
                      dataSourceRef preserves all values, and generates an error if
                      a disallowed value is specified. * While dataSource only allows
                      local objects, dataSourceRef allows objects in any namespaces.
                      (Beta) Using this field requires the AnyVolumeDataSource feature
                      gate to be enabled. (Alpha) Using the namespace field of dataSourceRef
                      requires the CrossNamespaceVolumeDataSource feature gate to
                      be enabled.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                      namespace:
                        description: Namespace is the namespace of resource being
                          referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                          object is required in the referent namespace to allow that
                          namespace's owner to accept the reference. See the ReferenceGrant
                          documentation for details. (Alpha) This field requires the
                          CrossNamespaceVolumeDataSource feature gate to be enabled.
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  resources:
                    description: 'resources represents the minimum resources the volume
                      should have. If RecoverVolumeExpansionFailure feature is enabled
                      users are allowed to specify resource requirements that are
                      lower than previous value but must still be higher than capacity
                      recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  selector:
                    description: selector is a label query over volumes to consider
                      for binding.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                  storageClassName:
                    description: 'storageClassName is the name of the StorageClass
                      required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                    type: string
                  volumeMode:
                    description: volumeMode defines what type of volume is required
                      by the claim. Value of Filesystem is implied when not included
                      in claim spec.
                    type: string
                  volumeName:
                    description: volumeName is the binding reference to the PersistentVolume
                      backing this claim.
                    type: string
                type: object
              replicationAttribute:
                description: ReplicationAttribute defines the state of replication;
                  "primary" or "secondary"
                type: string
              storageClassName:
                description: StorageClassName for creating replication
                type: string
            required:
            - persistentVolumeClaimName
            - replicationAttribute
            - storageClassName
            type: object
          status:
            description: LocalVolumeStatus defines the observed state of LocalVolume
            properties:
              ready:
                description: Ready describes replication status
                type: boolean
              volumeAttribute:
                description: VolumeAttribute describes attributes of volumes
                properties:
                  ldevID:
                    type: integer
                  nickname:
                    type: string
                  serialNumber:
                    type: integer
                type: object
            required:
            - ready
            - volumeAttribute
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: remotevolumes.hspc.hitachi.com
spec:
  group: hspc.hitachi.com
  names:
    kind: RemoteVolume
    listKind: RemoteVolumeList
    plural: remotevolumes
    singular: remotevolume
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.ready
      name: Ready
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: RemoteVolume is the Schema for the remotevolumes API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RemoteVolumeSpec defines the desired state of RemoteVolume
            type: object
          status:
            description: RemoteVolumeStatus defines the observed state of RemoteVolume
            properties:
              ready:
                description: Ready describes replication status
                type: boolean
              volumeAttribute:
                description: VolumeAttribute describes attributes of volumes
                properties:
                  ldevID:
                    type: integer
                  nickname:
                    type: string
                  serialNumber:
                    type: integer
                type: object
            required:
            - ready
            - volumeAttribute
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: replications.hspc.hitachi.com
spec:
  group: hspc.hitachi.com
  names:
    kind: Replication
    listKind: ReplicationList
    plural: replications
    singular: replication
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.status
      name: Status
      type: string
    - jsonPath: .spec.desiredPairState
      name: DesiredState
      type: string
    - jsonPath: .status.currentOperation.operation
      name: Operation
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: Replication is the Schema for the replications API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ReplicationSpec defines the desired state of Replication
            properties:
              desiredPairState:
                description: DesiredPairState defines the desired state of replicaton
                  pair
                type: string
              persistentVolumeClaimName:
                description: PersistentVolumeClaimName for creating replication
                type: string
              persistentVolumeClaimSpec:
                description: PersistentVolumeClaimSpec defines the spec of PersistentVolumeClaim;
                  This field will only be used for "secondary" sites.
                properties:
                  accessModes:
                    description: 'accessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                    items:
                      type: string
                    type: array
                  dataSource:
                    description: 'dataSource field can be used to specify either:
                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. When the AnyVolumeDataSource feature gate is enabled,
                      dataSource contents will be copied to dataSourceRef, and dataSourceRef
                      contents will be copied to dataSource when dataSourceRef.namespace
                      is not specified. If the namespace is specified, then dataSourceRef
                      will not be copied to dataSource.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                    x-kubernetes-map-type: atomic
                  dataSourceRef:
                    description: 'dataSourceRef specifies the object from which to
                      populate the volume with data, if a non-empty volume is desired.
                      This may be any object from a non-empty API group (non core
                      object) or a PersistentVolumeClaim object. When this field is
                      specified, volume binding will only succeed if the type of the
                      specified object matches some installed volume populator or
                      dynamic provisioner. This field will replace the functionality
                      of the dataSource field and as such if both fields are non-empty,
                      they must have the same value. For backwards compatibility,
                      when namespace isn''t specified in dataSourceRef, both fields
                      (dataSource and dataSourceRef) will be set to the same value
                      automatically if one of them is empty and the other is non-empty.
                      When namespace is specified in dataSourceRef, dataSource isn''t
                      set to the same value and must be empty. There are three important
                      differences between dataSource and dataSourceRef: * While dataSource
                      only allows two specific types of objects, dataSourceRef allows
                      any non-core object, as well as PersistentVolumeClaim objects.
                      * While dataSource ignores disallowed values (dropping them),
                      dataSourceRef preserves all values, and generates an error if
                      a disallowed value is specified. * While dataSource only allows
                      local objects, dataSourceRef allows objects in any namespaces.
                      (Beta) Using this field requires the AnyVolumeDataSource feature
                      gate to be enabled. (Alpha) Using the namespace field of dataSourceRef
                      requires the CrossNamespaceVolumeDataSource feature gate to
                      be enabled.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                      namespace:
                        description: Namespace is the namespace of resource being
                          referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                          object is required in the referent namespace to allow that
                          namespace's owner to accept the reference. See the ReferenceGrant
                          documentation for details. (Alpha) This field requires the
                          CrossNamespaceVolumeDataSource feature gate to be enabled.
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  resources:
                    description: 'resources represents the minimum resources the volume
                      should have. If RecoverVolumeExpansionFailure feature is enabled
                      users are allowed to specify resource requirements that are
                      lower than previous value but must still be higher than capacity
                      recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  selector:
                    description: selector is a label query over volumes to consider
                      for binding.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                  storageClassName:
                    description: 'storageClassName is the name of the StorageClass
                      required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                    type: string
                  volumeMode:
                    description: volumeMode defines what type of volume is required
                      by the claim. Value of Filesystem is implied when not included
                      in claim spec.
                    type: string
                  volumeName:
                    description: volumeName is the binding reference to the PersistentVolume
                      backing this claim.
                    type: string
                type: object
              replicationAttribute:
                description: ReplicationAttribute defines the state of replication;
                  "primary" or "secondary"
                type: string
              storageClassName:
                description: StorageClassName for creating replication
                type: string
            required:
            - persistentVolumeClaimName
            - storageClassName
            type: object
          status:
            description: ReplicationStatus defines the observed state of Replication
            properties:
              conditions:
                description: Conditions represent the latest available observations
                  of an object's state
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              currentOperation:
                description: CurrentOperation defines the running operation
                properties:
                  operation:
                    description: ReplicationOperation defines the operation of replication
                    type: string
                  running:
                    type: boolean
                required:
                - operation
                - running
                type: object
              replicationPair:
                description: ReplicationPair defines the replication pairs
                properties:
                  localSerialNumber:
                    type: integer
                  localStorageDeviceId:
                    type: string
                  primaryVolumeId:
                    type: integer
                  primaryVolumeNickname:
                    type: string
                  remoteSerialNumber:
                    type: integer
                  remoteStorageDeviceId:
                    type: string
                  secondaryVolumeId:
                    type: integer
                  secondaryVolumeNickname:
                    type: string
                required:
                - localSerialNumber
                - localStorageDeviceId
                - primaryVolumeId
                - primaryVolumeNickname
                - remoteSerialNumber
                - remoteStorageDeviceId
                - secondaryVolumeId
                - secondaryVolumeNickname
                type: object
              status:
                description: Status describes the current status of the replication
                type: string
            required:
            - currentOperation
            - replicationPair
            - status
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hspc-replication-operator-controller-manager
  namespace: hspc-replication-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hspc-replication-operator-leader-election-role
  namespace: hspc-replication-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: hspc-replication-operator-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - patch
  - update
- apiGroups:
  - hspc.hitachi.com
  resources:
  - localvolumes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - hspc.hitachi.com
  resources:
  - localvolumes/finalizers
  verbs:
  - update
- apiGroups:
  - hspc.hitachi.com
  resources:
  - localvolumes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - hspc.hitachi.com
  resources:
  - remotevolumes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - hspc.hitachi.com
  resources:
  - remotevolumes/finalizers
  verbs:
  - update
- apiGroups:
  - hspc.hitachi.com
  resources:
  - remotevolumes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - hspc.hitachi.com
  resources:
  - replications
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - hspc.hitachi.com
  resources:
  - replications/finalizers
  verbs:
  - update
- apiGroups:
  - hspc.hitachi.com
  resources:
  - replications/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - security.openshift.io
  resourceNames:
  - privileged
  resources:
  - securitycontextconstraints
  verbs:
  - use
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - volumeattachments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hspc-replication-operator-leader-election-rolebinding
  namespace: hspc-replication-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hspc-replication-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: hspc-replication-operator-controller-manager
  namespace: hspc-replication-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hspc-replication-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hspc-replication-operator-manager-role
subjects:
- kind: ServiceAccount
  name: hspc-replication-operator-controller-manager
  namespace: hspc-replication-operator-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: hspc-replication-operator-controller-manager
  namespace: hspc-replication-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --enable-leader-election
        command:
        - /manager
        env:
        - name: SPC_REPLICATION_STORAGE_CONFIG
          value: /spc/replication/config/storage-secrets.yaml
        - name: SPC_REPLICATION_REMOTE_KUBECONFIG
          value: /spc/replication/config/remote-kubeconfig
        image: hitachiedge1.jfrog.io/hitachicsi-oci-oss/hspc-replication-operator:v1.4.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /spc/replication/config
          name: secrets
          readOnly: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: hspc-replication-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: secrets
        projected:
          sources:
          - secret:
              name: hspc-replication-operator-storage-secrets
          - secret:
              name: hspc-replication-operator-remote-kubeconfig
